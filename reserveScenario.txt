// 시나리오 예약 - 박대원
	@PostMapping("/scenario/reserve")
	public Map<String, Object> reserveScenario(@RequestBody Map<String, Object> input,HttpServletRequest request) {
		//service.updateScenario(input);
		boolean isOverlapFlag = false;
		

//		int wholeTime = 0;
//		//더해질 시간 구하기
//		if (input.containsKey("scenarioList") == true) {
//			List<Map<String, Object>> scenarioList = (List<Map<String, Object>>) input.get("scenarioList");
//			// 총 삽입해야될 개수 계산
//			int totalCount = 0;
//			
//			for(Map<String, Object> scenario : scenarioList) {
//				int loopCount = Integer.parseInt(scenario.get("loopCount").toString());
//				int actTime=0;
//				int actionCount = 0;
//				List<Map<String, Object>> actionList = (List<Map<String,Object>>) scenario.get("actionList");
//				
//				for(Map<String, Object> action : actionList) {
//					actionCount += Integer.parseInt(action.get("loopCount").toString()) * Integer.parseInt(action.get("userCount").toString()); 
//					//
//					System.out.println("반복횟수..? "+Integer.parseInt(action.get("loopCount").toString()));
//					System.out.println("기준시간..? "+ Integer.parseInt(action.get("timeSet").toString()));
//					System.out.println("타임아웃..? "+ Integer.parseInt(action.get("timeout").toString().substring(0,action.get("timeout").toString().length()-3)));
//					actTime += (Integer.parseInt(action.get("loopCount").toString()) * Integer.parseInt(action.get("timeSet").toString())) + Integer.parseInt(action.get("timeout").toString().substring(0,action.get("timeout").toString().length()-3));
//				}
//				totalCount += loopCount * actionCount;
//				wholeTime += actTime;
//				System.out.println("루프 "+loopCount);// 시나리오 자체의 루프
//				System.out.println("액션 "+actionCount);
//				System.out.println("총시간 "+wholeTime);
//	
//			}
//			System.out.println("시나리오 추가될 시간! "+wholeTime);
//		}
//		
		
		
		
		
		
		
		
		System.out.println("초기 input :"+input);
//		System.out.println("request "+ request.getSession().getId());
//		Map<String, Object> temp = (Map<String, Object>) input.get("scenario");
//		temp.get("scenarioList");
		
		
		//최초 예약 시 세션 아이디 설정해서 맵에 넣어줌 >> reserve Table에도 저장해야함
		input.put("sessionId", request.getSession().getId());
		

		service.insertReserve(input);//여기서 RSRV_ID 생성됨
		
		//KEY 확인용
		Set set = input.keySet();
		Iterator iterator = set.iterator();
		
		while(iterator.hasNext()) {
			String key = (String)iterator.next();
			//System.out.println("input key : "+ key);
		}
		//Key의 Value 확인용
		//System.out.println(input.get("scenario"));
		//System.out.println(input.get("actionIds"));
		///////////////////////////////////////////////////////////////
		/**************************************************************/
		//받아온 예약 내용 저장 
		srTemp = new LinkedHashMap();
		String reserveTime;
		Map<String, Object> scenarioList = new HashMap<String,Object>();
		
		srTemp = (LinkedHashMap) input.get("scenario");
		reserveTime = (String) srTemp.get("reserveTime");
		
		//시나리오리스트 형태 테스트
		System.out.println("시나리오 리스트 어떻게 생김 "+ srTemp.get("scenarioList"));
		
		scenarioList.put("scenarioList", srTemp.get("scenarioList"));
		scenarioList.put("sessionId", request.getSession().getId());
		/**************************************************************/
		//System.out.println("확인좀 해보자 >>>>>>>>>>>>>"+scenarioList);
		
		//예약시간 중복 확인
		ArrayList<Map<String,Object>> overlapCheck = (ArrayList<Map<String, Object>>) selectReservedScenarioList().get("reserveList");
		for(int k=0; k<overlapCheck.size()-1;k++){
			if(reserveTime.equals(overlapCheck.get(k).get("reserveTime"))){
				//System.out.println("지금 예약한 시간에 이미 다른 예약이 있습니다. >> " +overlapCheck.get(k).get("reserveId")+" "+overlapCheck.get(k).get("reserveTime"));
				isOverlapFlag = true;
			}
		}
		/***********************************여기에서 overlapFlag 전송할 수 있도록*********************************************/
		String reserveId = mapper.selectLastReserveId(input);//맨 마지막 예약 아이디
		ArrayList<Integer> reserveIds = new ArrayList<>();
		reserveIds.add(Integer.parseInt(reserveId));
		
		//예약클릭 시  중복이라면 여기서 종료
		if (isOverlapFlag == true) {
			Map<String, Object> tempInput = new HashMap<String, Object>();
			tempInput.put("overlaps", true);
			
			input.put("reserveIds", reserveIds);
			service.deleteReserve(input);//중복 db 삭제 되는지 확인
			System.out.println("reserve overlap!"+input);
			return tempInput;
		}
		/***********************************여기에서 overlapFlag 전송할 수 있도록*********************************************/
		
		
		((Map<String, Object>)input.get("scenario")).put("reserveId", reserveId);//이제 input{scenario={rsrvId='1'}} 추가됨
		
		//0: 대기중, 1: 실행중, 2: 실행완료
		//service.updateReserveScenario(input,0,srTemp); // 대기중으로 설정
		service.updateReserveScenario(input,"대기중"); // 대기중으로 설정
		
		//받은 String 년월일시분 split
		int ymd_hm[] = new int[5];
		
		String reserve[] = reserveTime.split("_");
		String reserveYMD[] = reserve[0].split("/");//3개
		String reserveHM[] = reserve[1].split(":");//2개
		
		
		ymd_hm[0] = Integer.parseInt(reserveYMD[0]);
		ymd_hm[1] = Integer.parseInt(reserveYMD[1]);
		ymd_hm[2] = Integer.parseInt(reserveYMD[2]);
		
		ymd_hm[3] = Integer.parseInt(reserveHM[0]);
		ymd_hm[4] = Integer.parseInt(reserveHM[1]);
		
		
		Calendar date = Calendar.getInstance();
		date.set(ymd_hm[0],ymd_hm[1]-1,ymd_hm[2],ymd_hm[3],ymd_hm[4],0);
		
		
		String rsrvIndicator = reserveId+","+date.getTimeInMillis();//현재 예약 id, time 기억
		/**************************************************************************/
		//예약날짜들 전역 예약날짜배열에 삽입
		SimpleDateFormat format1 = new SimpleDateFormat ("yyMMddHHmm");
		String sdateTemp = format1.format(date.getTimeInMillis());
		//rsrvTimeArr = date.getTimeInMillis();/////////////////////////////
		//System.out.println("현재 시간 어떻게 들어오냐"+ sdateTemp);
		int idateTemp = Integer.parseInt(sdateTemp);
		//System.out.println("현재 시간 어떻게 들어오냐"+ idateTemp);
		//rsrvTimeArr.add(idateTemp);
		
		rsrvTimeArr.add(date.getTimeInMillis());
		/**************************************************************************/
		if(isOverlapFlag==true) {
			System.out.println("중복 예약이므로 예약목록에 담지 않겠습니다.");
		}else {
			rsrvList.add(rsrvIndicator); //예약 배열에 추가
		}
		
		//System.out.println("리스트!!! "+rsrvIndicator);
		//System.out.println("내가 설정한 시간 "+date.getTimeInMillis());
		//db 예약상태 업데이트
		
		

		
		//timer 작업
		Timer timer = new Timer();
		//TimerTask timerTask = new TimerTask()
		TimerTask timerTask = new TimerTask() {
			
			@Override
			public void run() {
				// TODO Auto-generated method stub
				
//				System.out.println("야호ㅗㅗㅗㅗ");
//				System.out.println(rsrvTimeArr);
//				
//				System.out.println("킥킥ㅗㅗㅗㅗ");
//				System.out.println(System.currentTimeMillis());
				
				System.out.println("1. rsrvList : "+rsrvList);
				System.out.println("2. rsrvTimeArr : "+rsrvTimeArr);
				System.out.println("current Time"+System.currentTimeMillis());
				
				//예약시간과 실행시간이 같으면 실행완료예약이니 예약 배열에서 삭제
				for(int i=0; i<rsrvTimeArr.size();i++) {
					if(rsrvTimeArr.get(i)-100 < System.currentTimeMillis() && rsrvTimeArr.get(i)+100 > System.currentTimeMillis()) {
						rsrvTimeArr.remove(i);
					}
				}
				
				//삭제된 예약id와 예약시간 [{id,time}, {id,time}, {id,time}]
				ArrayList<Map<String,Object>> listTemp = (ArrayList<Map<String, Object>>) selectDeletedReservedScenarioList().get("deletedReservedScenarioList");
				//System.out.println("삭제조회목록222 : "+selectDeletedReservedScenarioList());
				//boolean executeFlag = true;
				boolean executeFlag = true;//중복시 하나만 실행하기 위한 플래그
				//
				gExecuteFlag=true;//예약 실행될 때 예약실행플래그 on
				
			
				String myTime;
				String timerTemp = String.valueOf(System.currentTimeMillis());//timer시간(밀리초포함)
				String timerTime = timerTemp.substring(0, timerTemp.length()-3);//timer시간 (밀리초제거)
				
				//비교할 시간 문자열 설정
				for(int i=0; i<rsrvList.size();i++) {
					String temp[]=rsrvList.get(i).split(",");//id, time 분리
					System.out.println(temp[0]+" "+temp[1]);
					myTime = temp[1].substring(0, temp[1].length()-3);//내 시간(밀리초제거)
							
					
					//[rsrvId -- rsrvTime]
					//내가 설정한 시간과 타이머의 시간이 같으면 내 rsrvId를 가져온 후 Map에 추가 - 이 작업을 하지 않으면 db의 마지막 행의 상태만 바뀌게 됨
					if(myTime.equals(timerTime)) {
						//id 값 가져왔음 -> 예약 실행되는 현재 인덱스(temp[0]) 파악함 , 검사로직, 추가됨
						for(int j=0; j<listTemp.size(); j++) {		
							//System.out.println("temp[0]형식 : "+temp[0].getClass()+", listTemp.get(j)형식 : "+listTemp.get(j).get("reserveId").getClass());
							//System.out.println("t/f판단"+temp[0].equals(listTemp.get(j).get("reserveId"))+",temp[0] : "+temp[0]+", listTemp.get(j): "+listTemp.get(j).get("reserveId"));
							
							//삭제된 예약들이 실행되지 않도록 구분
							if(temp[0].equals(String.valueOf(listTemp.get(j).get("reserveId")))) {
								System.out.println("삭제된 예약과 중복됩니다. "+listTemp.get(j).get("reserveId"));
								executeFlag = false;
							}
						}
						
						if(executeFlag) {
							//원래 if(myTime.equals())안에 있던 함수들
							((Map<String, Object>)input.get("scenario")).put("reserveId", temp[0]);//update할 Map에 rsrvId 갱신
							srTemp.put("reserveId", temp[0]);//복사할 Map인 srTemp에도 rsrvId 갱신
							
							//service.updateReserveScenario(input, 1, srTemp);//상태갱신 
							service.updateReserveScenario(input,"실행중");//상태갱신 test
							System.out.println("예약 시나리오 시작");
							
							service.executeScenario(scenarioList);//실행 -> 실행 플래그 true
							//service.updateReserveScenario(input, 2, ScenarioController.srTemp);//상태갱신 
							service.updateReserveScenario(input,"실행완료");//상태갱신 test
						}
						
						//실행완료 후 예약배열에서 삭제
						rsrvList.remove(i);

					}

				}
				//타이머 끝나면 실행 플래그 false
				gExecuteFlag=false;
			}
			//input.put("sessionId", request.getSession().getId());
		};

		//timer.schedule(timerTask, new Date(date.getTimeInMillis()), 24*60*60*1000);
		timer.schedule(timerTask, new Date(date.getTimeInMillis()));
		
		
		return input;
	}
{"version":3,"sources":["webpack:///src/components/Totalinfo.vue","webpack:///./src/components/Totalinfo.vue?d395","webpack:///./src/components/Totalinfo.vue"],"names":["Totalinfo","components","Buttons","VueJsonPretty","vue_json_pretty_default","a","data","_this","this","jsonData","htmlData","resultContent","buttonEvents","refresh","show","event","loadGrid","download","downloadExcel","series","testSeries","pieSeries","chartTitle","chartOptions","chart","id","toolbar","zoom","type","enabled","autoScaleYaxis","stroke","width","markers","size","strokeWidth","legend","position","xaxis","title","text","labels","hideOverlappingLabels","axisBorder","axisTicks","tooltip","tickAmount","yaxis","min","pieChartOptions","align","colors","focusIndex","loading","logData","logLoading","logTotalCount","pageSize","pagePosition","xmax","xmin","xtick","created","methods","_this2","axios","get","then","response","historyList","forEach","row","index","$refs","selectRow","catch","ex","console","log","historyClick","_this3","loadingInstance","$loading","lock","spinner","target","container","$el","fullscreen","params","workSeq","close","resultList","graphList","length","categories","arrCountStartRequest","arrCountEndRequest","sumEndRequest","result","list","push","resultTime","countStartRequest","countEndRequest","Number","name","lineChart","updateOptions","updateSeries","Math","round","resTimeCellCss","value","rstType","background","dbClickResult","JSON","parse","rstContent","e","notification","excelData","No","수행명","rstName","수행일시","startDatetime","수행종료일시","endDatetime","응답시간(ms)","resTime","내용","wb","xlsx_default","utils","book_new","ws","json_to_sheet","book_append_sheet","writeFile","components_Totalinfo","render","_vm","_h","$createElement","_c","_self","staticStyle","height","text-align","attrs","region","border","_v","ref","columnResizing","selectionMode","on","selectionChange","$event","cellCss","scopedSlots","_u","key","fn","scope","_s","rowIndex","slot","field","sortable","visible","custom-class","update:visible","showLength","showDoubleQuotes","showSelectController","highlightMouseoverNode","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"js/5.4718a7929411590b07aa.js","sourcesContent":["<template>\r\n    <div>\r\n        <Layout style=\"width: 100%; height: 800px\">\r\n            <LayoutPanel region=\"north\" :border=\"false\" style=\"height: 45px; text-align: right;\">\r\n                <Buttons :buttonEvents=\"buttonEvents\"/>\r\n            </LayoutPanel>\r\n\r\n            <LayoutPanel region=\"west\" title=\"수행기록\" style=\"width: 400px;\">\r\n                <DataGrid\r\n                    ref=\"historyList\"\r\n                    :data=\"data\"\r\n                    :columnResizing=\"true\"\r\n                    :border=\"false\"\r\n                    :loading=\"loading\"\r\n                    selectionMode=\"single\"\r\n                    @selectionChange=\"historyClick($event)\">\r\n                    \r\n                    <GridColumn cellCss=\"datagrid-td-rownumber\" width=\"30\" align=\"center\">\r\n                        <template slot=\"header\">\r\n                            No.\r\n                        </template>\r\n                        <template slot=\"body\" slot-scope=\"scope\">\r\n                            {{ scope.rowIndex + 1 }}\r\n                        </template>\r\n                    </GridColumn>\r\n                    <GridColumn field=\"workDatetime\" title=\"수행일시\" width=\"160\" align=\"center\" sortable></GridColumn>\r\n                    <GridColumn field=\"workName\" title=\"수행명\" align=\"left\" sortable></GridColumn>\r\n                    <GridColumn field=\"rstCount\" title=\"수행건수\" align=\"center\" width=\"70\" sortable></GridColumn>\r\n                </DataGrid>\r\n            </LayoutPanel>\r\n\r\n            <LayoutPanel region=\"center\" :border=\"false\" style=\"width: 100%; height: 100%;\">\r\n                <Layout ref=\"container\">\r\n                    <LayoutPanel region=\"north\" title=\"수행결과\" style=\"width: 100%; height: 380px;\">\r\n                        graph1\r\n                        \r\n                    </LayoutPanel>\r\n                    \r\n                    <LayoutPanel region=\"west\" style=\"width: 100%; height: 380px;\">\r\n                        graph2\r\n                    </LayoutPanel>\r\n                    \r\n                </Layout>\r\n            </LayoutPanel>\r\n        </Layout>\r\n\r\n        <el-dialog title=\"결과 내용\" :visible.sync=\"resultContent\" width=\"800px\" custom-class=\"dialog-h\">\r\n            <vue-json-pretty\r\n                :data=\"jsonData\"\r\n                :showLength=\"true\"\r\n                :showDoubleQuotes=\"false\"\r\n                :showSelectController=\"true\"\r\n                :highlightMouseoverNode=\"true\">\r\n            </vue-json-pretty>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport Buttons from './Buttons'\r\nimport VueJsonPretty from 'vue-json-pretty'\r\nimport XLSX from 'xlsx'\r\n\r\nexport default {\r\n    components: {\r\n        Buttons,\r\n        VueJsonPretty,\r\n    },\r\n    data() {\r\n        return {\r\n            jsonData: {},\r\n            htmlData: '',\r\n            resultContent: false,\r\n            buttonEvents: {\r\n                refresh: {\r\n                    show: true,\r\n                    event: () => {\r\n                        this.loadGrid()\r\n                    }\r\n                },\r\n                download: {\r\n                    show: true,\r\n                    event: this.downloadExcel\r\n                }\r\n            },\r\n\r\n            // 라인차트 데이터\r\n            //series: [],\r\n            series: [{\r\n                //data: [[1, 34], [3, 54], [5, 23] , [15, 43]]\r\n                data:[]\r\n            }], \r\n            testSeries: [{\r\n                //data: [[1, 34], [3, 54], [5, 23] , [15, 43]]\r\n                data:[]\r\n            }], \r\n            // 파이차트 데이터\r\n            pieSeries: [0, 0],\r\n\r\n            chartTitle: 'TPS 차트',\r\n            // 라인 차트 옵션\r\n            chartOptions: {\r\n                /*\r\n                title: {\r\n                    text: 'TPS 차트',\r\n                    align: 'center',\r\n                },\r\n                //*/\r\n\r\n                series:[],\r\n\r\n                chart: {\r\n                    id: 'chartLine',\r\n                    toolbar: {\r\n                        show: false,\r\n                    },\r\n                    zoom: {\r\n                        type: 'x',\r\n                        enabled: true,\r\n                        autoScaleYaxis: true\r\n                    },\r\n                },\r\n                stroke: {\r\n                    width: 3\r\n                },\r\n                markers: {\r\n                    size: 0,\r\n                    strokeWidth: 2,\r\n                },\r\n                legend: {\r\n                    position: 'top'\r\n                },\r\n                xaxis: {\r\n                    title: {\r\n                        text: 'Second'\r\n                    },\r\n                    labels: {\r\n                        //show: false,\r\n                        show: true,\r\n                        hideOverlappingLabels: true,\r\n                    },\r\n                    axisBorder: {\r\n                        show: false\r\n                    },\r\n                    axisTicks: {\r\n                        show: false\r\n                    },\r\n                    tooltip: {\r\n                        enabled: false\r\n                    },\r\n                    \r\n                    \r\n\r\n                    //min: this.min\r\n                    //,max: this.max,\r\n\r\n                    //(max - min)이 1초단위 표현            input : 1 >> max -min\r\n\r\n                    //소수점 둘째자리 아래는 표현이 안됨 ex) 0.01 X\r\n                    //(max - min) * 10이 0.1초단위 표현     input : 0.1 >> (max - min) * 100\r\n                    //(max - min) * 0.1이 10초단위 표현     input : 10 >> (max - min) * 0.1\r\n                    //(max - min) * 0.01이 100초단위 표현     input : 100 >> (max - min) * 0.01\r\n                    \r\n                    //즉, input 입력 시 (1/input)을 곱해주면 됨\r\n                    //type: \"time\",\r\n                    //type: \"numeric\",\r\n                    //min: this.xmin,\r\n                    //max: this.xmax,\r\n                    //tickAmount: this.xtick\r\n                    \r\n                    //tickInterval:10* 1000,\r\n\r\n                    \r\n                    tickAmount: 4,\r\n\r\n                    \r\n                },\r\n                \r\n                yaxis: {\r\n                    title: {\r\n                        //text: '응답시간(milliseconds)'\r\n                        text: 'TPS Count'\r\n                    },\r\n                    tickAmount: 4,\r\n                    /*\r\n                    labels: {\r\n                        formatter: function(val, opts) {\r\n                            return val + 'ms'\r\n                        }\r\n                    },\r\n                    //*/\r\n                    min: 0,\r\n                    // max: 15000,\r\n                }\r\n            },\r\n            // 파이 차트 옵션\r\n            pieChartOptions: {\r\n                title: {\r\n                    text: 'SUCCESS/FAIL 차트',\r\n                    align: 'center'\r\n                },\r\n                colors: ['#00E397', '#FF7979',],\r\n                labels: ['SUCCESS', 'FAIL'],\r\n                legend: {\r\n                    position: 'top'\r\n                },\r\n            },\r\n            \r\n            focusIndex: 0,\r\n            data: [],\r\n            loading: false,\r\n            logData: [],\r\n            logLoading: false,\r\n            logTotalCount: 0,\r\n            pageSize: 50,\r\n            pagePosition: 'bottom',\r\n\r\n            //x축 간격 위한 min, max\r\n            xmax:0,\r\n            xmin:0,\r\n            xtick:0\r\n        }\r\n    },\r\n\r\n    created() {\r\n        this.loadGrid()\r\n    },\r\n\r\n    methods: {\r\n        loadGrid() {\r\n            this.loading = true\r\n            this.axios.get('/api/v1/statistics').then(response => {\r\n                this.loading = false\r\n\r\n                response.data.historyList.forEach((row, index) => {\r\n                    row['index'] = index\r\n                })\r\n\r\n                this.data = response.data.historyList\r\n                this.$refs.historyList.selectRow(this.data[this.focusIndex])\r\n            }).catch(ex => {\r\n                console.log(ex)\r\n                this.loading = false\r\n            })\r\n        },\r\n\r\n        historyClick(row) {\r\n            if(row) {\r\n                this.focusIndex = row.index\r\n                this.logLoading = true\r\n\r\n                var loadingInstance = this.$loading({\r\n                    lock: true,\r\n                    text: 'Data Loading...',\r\n                    spinner: 'el-icon-loading',\r\n                    target: this.$refs.container.$el,\r\n                    fullscreen: false,\r\n                })\r\n\r\n                this.axios.get('/api/v1/statistics/result', {\r\n                    params: {\r\n                        workSeq: row.workSeq\r\n                    }\r\n                }).then(response => {\r\n                    loadingInstance.close()\r\n                    var resultList = response.data.resultList\r\n                    var graphList = response.data.graphList\r\n\r\n                    this.logTotalCount = resultList.length\r\n                    this.logData = resultList\r\n                    this.logLoading = false\r\n\r\n\r\n                    /*************************************************** 라인 차트 데이터 가공 *****************************************************/\r\n                    var categories = []\r\n                    var arrCountStartRequest = []\r\n                    var arrCountEndRequest = []\r\n                    var sumEndRequest = 0;\r\n                    var series = []\r\n\r\n                    var testSeries = []\r\n\r\n                    graphList.forEach((result, index, list) => {\r\n                        categories.push(result.resultTime)\r\n                        \r\n                        \r\n                        //park\r\n                        testSeries.push(result.resultTime)\r\n                        \r\n                        console.log(\"총길이 : \"+list.length)\r\n                        if(index == 0){\r\n                            this.xmin = result.resultTime\r\n                        }\r\n                        else if(index == list.length-1){\r\n                            this.xmax = result.resultTime\r\n                        }\r\n                        console.log('hello ['+index+\"] \"+ result.resultTime)//////////////\r\n                        //\r\n                        \r\n                        arrCountStartRequest.push(result.countStartRequest)\r\n                        \r\n                        arrCountEndRequest.push(result.countEndRequest)\r\n                        \r\n                        sumEndRequest += result.countEndRequest\r\n                        \r\n                    })\r\n                    this.xtick = this.xmax<this.xmin ? Number(60)+Number(this.xmax)-this.xmin : this.xmax-this.xmin\r\n                    //this.tick = this.max - this.min\r\n                    \r\n                    console.log('끝 : '+this.xmin, this.xmax, this.xtick)//\r\n                    console.log(\"카테고리 : \"+categories)\r\n                    console.log(\"시리즈 : \"+testSeries)\r\n                    \r\n                    testSeries.push({\r\n                        name: '초',\r\n                        data: testSeries\r\n                    })\r\n                    \r\n                    \r\n                    this.$refs.lineChart.updateOptions({\r\n                        xaxis: {\r\n                            //categories: categories,\r\n                            //categories: testSeries,\r\n                            labels: categories\r\n                            //testSeries: series,\r\n                        },\r\n                    })\r\n                    \r\n\r\n                    series.push({\r\n                        name: '요청수',\r\n                        data: arrCountStartRequest\r\n                    })\r\n\r\n                    series.push({\r\n                        name: '응답수',\r\n                        data: arrCountEndRequest\r\n                    })\r\n\r\n                    this.$refs.lineChart.updateSeries(series)\r\n                    //this.$refs.lineChart.updateSeries(testSeries)\r\n                    this.chartTitle = '평균 TPS: ' + Math.round((sumEndRequest / graphList.length))\r\n                    //*/\r\n                    /*****************************************************************************************************************************/\r\n\r\n\r\n\r\n                    /*************************************************** 라인 차트 데이터 가공 *****************************************************/\r\n                    /*\r\n                    var categories = []\r\n                    var series = []\r\n                    var tempArray = []\r\n                    var max = resultList[0].resTime\r\n\r\n                    resultList.forEach((result, index, list) => {\r\n                        var indexOf;\r\n\r\n                        if(row.workType == 'AT')\r\n                            indexOf = 2\r\n                        else if(row.workType == 'SR')\r\n                            indexOf = 4\r\n\r\n                        var rstName = result.rstName.substring(0, result.rstName.indexOf('-') + indexOf) + ' 루프'\r\n\r\n                        if(max < result.resTime)\r\n                            max = result.resTime\r\n                        \r\n                        tempArray.push(result.resTime)\r\n                        if(index + 1 == list.length) {\r\n                            series.push({\r\n                                name: rstName,\r\n                                data: [...tempArray]\r\n                            })\r\n                            return\r\n                        }\r\n\r\n                        var rstNameNums = result.rstName.substring(result.rstName.indexOf('-') + 1, result.rstName.length).split('-');\r\n                        var nextRstNameNums = list[index + 1].rstName.substring(list[index + 1].rstName.indexOf('-') + 1, list[index + 1].rstName.length).split('-')\r\n\r\n                        if(row.workType == 'AT') {\r\n                            if(rstNameNums[0] != nextRstNameNums[0]) {\r\n                                series.push({\r\n                                    name: rstName,\r\n                                    data: [...tempArray]\r\n                                })\r\n                                tempArray = []\r\n                            }\r\n                        }\r\n                        else if(row.workType == 'SR') {\r\n                            if(rstNameNums[0] != nextRstNameNums[0] || rstNameNums[1] != nextRstNameNums[1]) {\r\n                                series.push({\r\n                                    name: rstName,\r\n                                    data: [...tempArray]\r\n                                })\r\n                                tempArray = []\r\n                            }\r\n                        }\r\n\r\n                        categories.push(result.rstName)\r\n                    })\r\n\r\n                    this.$refs.lineChart.updateOptions({\r\n                        xaxis: {\r\n                            categories: categories\r\n                        },\r\n                    })\r\n\r\n                    this.$refs.lineChart.updateSeries(series)\r\n                    //*/\r\n                    /*****************************************************************************************************************************/\r\n\r\n                    /*************************************************** 파이 차트 데이터 가공 *****************************************************/\r\n                    /*\r\n                    var pieData = []\r\n                    pieData.push(row.successCount)\r\n                    pieData.push(row.failCount)\r\n\r\n                    this.$refs.pieChart.updateSeries(pieData)\r\n                    //*/\r\n                    /*****************************************************************************************************************************/\r\n                }).catch(ex => {\r\n                    this.logLoading = false\r\n                    loadingInstance.close()\r\n                    console.log(ex)\r\n                })\r\n            }\r\n        },\r\n\r\n        resTimeCellCss(row, value) {\r\n            if(row.rstType == 'FAIL') {\r\n                return { background: '#FF7979' }\r\n            }\r\n        },\r\n\r\n        dbClickResult(row) {\r\n            this.resultContent = true\r\n            try {\r\n                this.jsonData = JSON.parse(row.rstContent)\r\n            } catch(e) {\r\n                this.jsonData = row.rstContent\r\n            }\r\n            \r\n        },\r\n\r\n        downloadExcel() {\r\n            if(this.logLoading) {\r\n                this.notification('downloadExcel')\r\n            } else {\r\n                var excelData = []\r\n\r\n                this.logData.forEach((value, index) => {\r\n                    excelData.push({\r\n                        'No': index + 1,\r\n                        '수행명': value.rstName,\r\n                        '수행일시': \"'\" + value.startDatetime,\r\n                        '수행종료일시': \"'\" + value.endDatetime,\r\n                        '응답시간(ms)': value.resTime,\r\n                        '내용': value.rstContent\r\n                    })\r\n                })\r\n                const wb = XLSX.utils.book_new()\r\n                const ws = XLSX.utils.json_to_sheet(excelData)\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Sheet1')\r\n                XLSX.writeFile(wb, 'log.csv')\r\n                //*/\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#chart {\r\n    margin-top: 10px;\r\n}\r\n\r\n/*\r\n#lineChart {\r\n    display: inline-block;\r\n}\r\n//*/\r\n\r\n#pieChart {\r\n    display: inline-block;\r\n}\r\n\r\n.vjs-tree {\r\n    height: 500px;\r\n    overflow: auto;\r\n}\r\n\r\n.dialog-h {\r\n    height: 600px;\r\n}\r\n\r\n</style>\n\n\n// WEBPACK FOOTER //\n// src/components/Totalinfo.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('Layout',{staticStyle:{\"width\":\"100%\",\"height\":\"800px\"}},[_c('LayoutPanel',{staticStyle:{\"height\":\"45px\",\"text-align\":\"right\"},attrs:{\"region\":\"north\",\"border\":false}},[_c('Buttons',{attrs:{\"buttonEvents\":_vm.buttonEvents}})],1),_vm._v(\" \"),_c('LayoutPanel',{staticStyle:{\"width\":\"400px\"},attrs:{\"region\":\"west\",\"title\":\"수행기록\"}},[_c('DataGrid',{ref:\"historyList\",attrs:{\"data\":_vm.data,\"columnResizing\":true,\"border\":false,\"loading\":_vm.loading,\"selectionMode\":\"single\"},on:{\"selectionChange\":function($event){return _vm.historyClick($event)}}},[_c('GridColumn',{attrs:{\"cellCss\":\"datagrid-td-rownumber\",\"width\":\"30\",\"align\":\"center\"},scopedSlots:_vm._u([{key:\"body\",fn:function(scope){return [_vm._v(\"\\n                        \"+_vm._s(scope.rowIndex + 1)+\"\\n                    \")]}}])},[_c('template',{slot:\"header\"},[_vm._v(\"\\n                        No.\\n                    \")])],2),_vm._v(\" \"),_c('GridColumn',{attrs:{\"field\":\"workDatetime\",\"title\":\"수행일시\",\"width\":\"160\",\"align\":\"center\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('GridColumn',{attrs:{\"field\":\"workName\",\"title\":\"수행명\",\"align\":\"left\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('GridColumn',{attrs:{\"field\":\"rstCount\",\"title\":\"수행건수\",\"align\":\"center\",\"width\":\"70\",\"sortable\":\"\"}})],1)],1),_vm._v(\" \"),_c('LayoutPanel',{staticStyle:{\"width\":\"100%\",\"height\":\"100%\"},attrs:{\"region\":\"center\",\"border\":false}},[_c('Layout',{ref:\"container\"},[_c('LayoutPanel',{staticStyle:{\"width\":\"100%\",\"height\":\"380px\"},attrs:{\"region\":\"north\",\"title\":\"수행결과\"}},[_vm._v(\"\\n                    graph1\\n                    \\n                \")]),_vm._v(\" \"),_c('LayoutPanel',{staticStyle:{\"width\":\"100%\",\"height\":\"380px\"},attrs:{\"region\":\"west\"}},[_vm._v(\"\\n                    graph2\\n                \")])],1)],1)],1),_vm._v(\" \"),_c('el-dialog',{attrs:{\"title\":\"결과 내용\",\"visible\":_vm.resultContent,\"width\":\"800px\",\"custom-class\":\"dialog-h\"},on:{\"update:visible\":function($event){_vm.resultContent=$event}}},[_c('vue-json-pretty',{attrs:{\"data\":_vm.jsonData,\"showLength\":true,\"showDoubleQuotes\":false,\"showSelectController\":true,\"highlightMouseoverNode\":true}})],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-63c556f5\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Totalinfo.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-63c556f5\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Totalinfo.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Totalinfo.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Totalinfo.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-63c556f5\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Totalinfo.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-63c556f5\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Totalinfo.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}
{"version":3,"sources":["webpack:///src/components/Statistics.vue","webpack:///./src/components/Statistics.vue?4c5e","webpack:///./src/components/Statistics.vue"],"names":["arrLabel","Statistics","components","Buttons","VueJsonPretty","vue_json_pretty_default","a","data","_this","this","options","value","label","tableData","header1","data1","blank","header2","data2","header3","data3","jsonData","htmlData","resultContent","buttonEvents","refresh","show","event","loadGrid","download","downloadExcel","series","pieSeries","chartTitle","chartOptions","chart","id","toolbar","zoom","type","enabled","autoScaleYaxis","stroke","width","markers","size","strokeWidth","legend","position","xaxis","title","text","labels","formatter","temp","Math","floor","parseInt","axisBorder","axisTicks","tooltip","yaxis","tickAmount","min","pieChartOptions","align","colors","focusIndex","loading","logData","logLoading","logTotalCount","pageSize","pagePosition","statisticArr","created","methods","_this2","axios","get","then","response","historyList","forEach","row","index","$refs","selectRow","catch","ex","console","log","xaxisChange","multipleVal","tickTemp","length","parseFloat","lineChart","updateOptions","max","historyClick","_this3","loadingInstance","$loading","lock","spinner","target","container","$el","fullscreen","params","workSeq","close","start","end","resultList","graphList","minResTime","maxResTime","startDatetime","resTime","endDatetime","successCount","failCount","categories","arrCountStartRequest","arrCountEndRequest","sumEndRequest","result","list","push","resultTime","countStartRequest","countEndRequest","name","updateSeries","round","resTimeCellCss","rstType","background","dbClickResult","JSON","parse","rstContent","e","notification","excelData","No","수행명","rstName","수행일시","수행종료일시","응답시간(ms)","내용","wb","xlsx_default","utils","book_new","ws","json_to_sheet","book_append_sheet","writeFile","components_Statistics","render","_vm","_h","$createElement","_c","_self","staticStyle","height","text-align","attrs","region","border","_v","ref","columnResizing","selectionMode","on","selectionChange","$event","cellCss","scopedSlots","_u","key","fn","scope","_s","rowIndex","slot","field","sortable","prop","margin-top","margin-right","placeholder","change","model","callback","$$v","expression","_l","item","total","pagination","rowDblClick","halign","visible","custom-class","update:visible","showLength","showDoubleQuotes","showSelectController","highlightMouseoverNode","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"js/6.7d48b851691a249ad89b.js","sourcesContent":["<template>\r\n    <div>\r\n        <Layout style=\"width: 100%;\">\r\n            <LayoutPanel region=\"north\" :border=\"false\" style=\"height: 45px; text-align: right;\">\r\n                <Buttons :buttonEvents=\"buttonEvents\"/>\r\n            </LayoutPanel>\r\n\r\n            <LayoutPanel region=\"west\" title=\"수행기록\" style=\"width: 400px;\">\r\n                <DataGrid\r\n                    ref=\"historyList\"\r\n                    :data=\"data\"\r\n                    :columnResizing=\"true\"\r\n                    :border=\"false\"\r\n                    :loading=\"loading\"\r\n                    selectionMode=\"single\"\r\n                    @selectionChange=\"historyClick($event)\">\r\n                    \r\n                    <GridColumn cellCss=\"datagrid-td-rownumber\" width=\"30\" align=\"center\">\r\n                        <template slot=\"header\">\r\n                            No.\r\n                        </template>\r\n                        <template slot=\"body\" slot-scope=\"scope\">\r\n                            {{ scope.rowIndex + 1 }}\r\n                        </template>\r\n                    </GridColumn>\r\n                    <GridColumn field=\"workDatetime\" title=\"수행일시\" width=\"160\" align=\"center\" sortable></GridColumn>\r\n                    <GridColumn field=\"workName\" title=\"수행명\" align=\"left\" sortable></GridColumn>\r\n                    <GridColumn field=\"rstCount\" title=\"수행건수\" align=\"center\" width=\"70\" sortable></GridColumn>\r\n                </DataGrid>\r\n            </LayoutPanel>\r\n\r\n            <LayoutPanel region=\"center\" :border=\"false\" style=\"width: 100%; height: 100%;\">\r\n                <Layout ref=\"container\">\r\n                    <LayoutPanel region=\"north\" title=\"수행결과\" style=\"width: 100%; height: 225px;\">\r\n                        <!--div style=\"width: 100%; text-align: center; margin-top: 10px;\">{{ chartTitle }}</div>\r\n                        <div id=\"chart\">\r\n                            <apexchart id=\"lineChart\" ref=\"lineChart\" type=\"line\" height=\"280\" :options=\"chartOptions\" :series=\"series\" />\r\n                        </div-->\r\n                          <template>\r\n                            <el-table\r\n                            :data=\"tableData\"\r\n                            \r\n                            style=\"width: 100%\"><!--100%--><!--3000px-->\r\n                                <el-table-column \r\n                                    prop=\"header1\"\r\n                                    label=\"\"\r\n                                    width=\"180\">\r\n                                    \r\n                                </el-table-column>\r\n                                <el-table-column\r\n                                    prop=\"data1\"\r\n                                    label=\"\"\r\n                                    width=\"200\">\r\n                                </el-table-column>\r\n                                <el-table-column\r\n                                    prop=\"blank\"\r\n                                    label=\"\">\r\n                                </el-table-column>\r\n                                <el-table-column\r\n                                    prop=\"header2\"\r\n                                    label=\"\">\r\n                                </el-table-column>\r\n                                <el-table-column\r\n                                    prop=\"data2\"\r\n                                    label=\"[종합집계]\"\r\n                                    width=\"200\"\r\n                                >\r\n                                </el-table-column>\r\n                                <el-table-column\r\n                                    prop=\"header3\"\r\n                                    label=\"\">\r\n                                </el-table-column>\r\n                                <el-table-column\r\n                                    prop=\"data3\"\r\n                                    label=\"\">\r\n                                </el-table-column>\r\n                                <el-table-column\r\n                                    prop=\"blank\"\r\n                                    label=\"\">\r\n                                </el-table-column>\r\n                                <el-table-column\r\n                                    prop=\"blank\"\r\n                                    label=\"\">\r\n                                </el-table-column>\r\n                            </el-table>\r\n                        </template>\r\n                        \r\n                    </LayoutPanel>\r\n                    \r\n                    <LayoutPanel region=\"center\" style=\"width: 100%; height: 620px;\">\r\n                        <div style=\"width: 100%; text-align: center; margin-top: 10px;\">\r\n                            <div style=\"width:100%\">\r\n                                    {{ chartTitle }}\r\n                            </div>\r\n            \r\n                            <div align=\"right\">\r\n                                <label>단위</label>&nbsp &nbsp\r\n                                <el-select v-model=\"value\" placeholder=\"Select\" style=\"width:10%; margin-right: 10px;\" @change=\"xaxisChange()\">\r\n                                    <el-option \r\n                                    \r\n                                    v-for=\"item in options\"\r\n                                    :key=\"item.value\"\r\n                                    :label=\"item.label\"\r\n                                    :value=\"item.value\"\r\n                                    \r\n                                    >\r\n                                    </el-option>\r\n                                </el-select>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div id=\"chart\">\r\n                            <apexchart id=\"lineChart\" ref=\"lineChart\" type=\"line\" height=\"250\" :options=\"chartOptions\" :series=\"series\" />\r\n                            <!-- <apexchart id=\"pieChart\"  ref=\"pieChart\" type=\"pie\" width=\"300\" height=\"300\" :options=\"pieChartOptions\" :series=\"pieSeries\" /> -->\r\n                        </div>\r\n                        <DataGrid\r\n                            ref=\"resultList\"\r\n                            :data=\"logData\"\r\n                            :total=\"logTotalCount\"\r\n                            :pagination=\"true\"\r\n                            :pageSize=\"pageSize\"\r\n                            :pagePosition=\"pagePosition\"\r\n                            :columnResizing=\"true\"\r\n                            :border=\"false\"\r\n                            @rowDblClick=\"dbClickResult\"\r\n                            style=\"width: 100%; height: 260px;\">\r\n\r\n                            <GridColumn cellCss=\"datagrid-td-rownumber\" width=\"60\" align=\"center\">\r\n                                <template slot=\"header\">\r\n                                    No.\r\n                                </template>\r\n                                <template slot=\"body\" slot-scope=\"scope\">\r\n                                    {{ scope.rowIndex + 1 }}\r\n                                </template>\r\n                            </GridColumn>\r\n                            <GridColumn field=\"rstName\" title=\"수행명\" width=\"150\" align=\"center\" sortable></GridColumn>\r\n                            <GridColumn field=\"startDatetime\" title=\"수행일시\" width=\"200\" align=\"center\" sortable></GridColumn>\r\n                            <GridColumn field=\"endDatetime\" title=\"수행종료일시\" width=\"200\" align=\"center\" sortable></GridColumn>\r\n                            <GridColumn field=\"resTime\" title=\"응답시간(ms)\" :cellCss=\"resTimeCellCss\" width=\"100\" align=\"center\" sortable></GridColumn>\r\n                            <GridColumn field=\"rstContent\" title=\"내용\" halign=\"center\"></GridColumn>\r\n                        </DataGrid>\r\n                    </LayoutPanel>\r\n                </Layout>\r\n            </LayoutPanel>\r\n        </Layout>\r\n\r\n        <el-dialog title=\"결과 내용\" :visible.sync=\"resultContent\" width=\"800px\" custom-class=\"dialog-h\">\r\n            <vue-json-pretty\r\n                :data=\"jsonData\"\r\n                :showLength=\"true\"\r\n                :showDoubleQuotes=\"false\"\r\n                :showSelectController=\"true\"\r\n                :highlightMouseoverNode=\"true\">\r\n            </vue-json-pretty>\r\n        </el-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nvar arrLabel = []\r\n\r\nimport Buttons from './Buttons'\r\nimport VueJsonPretty from 'vue-json-pretty'\r\nimport XLSX from 'xlsx'\r\n\r\nexport default {\r\n    components: {\r\n        Buttons,\r\n        VueJsonPretty,\r\n    },\r\n    data() {\r\n        return {\r\n            options: [{\r\n                value: 1,\r\n                label: '1초'\r\n                }, {\r\n                value: 0.1,\r\n                label: '10초'\r\n                }, {\r\n                value: 0.016,\r\n                label: '1분'\r\n                },{\r\n                value: 0.00027,\r\n                label: '1시간'\r\n                },],\r\n            value: 1,\r\n\r\n            tableData: [{\r\n                header1: '수행시작시간',\r\n                data1: '',\r\n                blank: '',\r\n                header2 : '수행종료시간',\r\n                data2 : ''\r\n            }, {\r\n                header1: '최대응답시간(ms)',\r\n                data1: '',\r\n                blank: '',\r\n                header2: '최소응답시간(ms)',\r\n                data2: ''\r\n            }, {\r\n                header1: '전체수행횟수',\r\n                data1: '',\r\n                blank: '',\r\n                header2: '성공횟수',\r\n                data2: '',\r\n                header3: '실패횟수',\r\n                data3: ''\r\n            }],\r\n\r\n\r\n\r\n            jsonData: {},\r\n            htmlData: '',\r\n            resultContent: false,\r\n            buttonEvents: {\r\n                refresh: {\r\n                    show: true,\r\n                    event: () => {\r\n                        this.loadGrid()\r\n                    }\r\n                },\r\n                download: {\r\n                    show: true,\r\n                    event: this.downloadExcel\r\n                }\r\n            },\r\n\r\n            // 라인차트 데이터\r\n            series: [],\r\n            // 파이차트 데이터\r\n            pieSeries: [0, 0],\r\n\r\n            chartTitle: 'TPS 차트',\r\n            // 라인 차트 옵션\r\n            chartOptions: {\r\n                /*\r\n                title: {\r\n                    text: 'TPS 차트',\r\n                    align: 'center',\r\n                },\r\n                //*/\r\n                chart: {\r\n                    id: 'chartLine',\r\n                    toolbar: {\r\n                        show: false,\r\n                    },\r\n                    zoom: {\r\n                        type: 'x',\r\n                        enabled: true,\r\n                        autoScaleYaxis: true\r\n                    },\r\n                },\r\n                stroke: {\r\n                    width: 3\r\n                },\r\n                markers: {\r\n                    size: 0,\r\n                    strokeWidth: 2,\r\n                },\r\n                legend: {\r\n                    position: 'top'\r\n                },\r\n                xaxis: {\r\n                    title: {\r\n                        text: 'Minute : Second'\r\n                    },\r\n                    labels: {\r\n                        //show: false,\r\n                        show: true,\r\n                        formatter: function(value) {\r\n                            var temp = Math.floor(parseInt(value))-1;\r\n                            //console.log(\"formatter에서의 arrLabel : \", arrLabel[value])\r\n                            //console.log(\"zz\",value, temp)\r\n                            return arrLabel[temp];//ct==category 배열 꼴로 라벨링\r\n                            //return arrLabel[0]\r\n                        }\r\n                    },\r\n                    axisBorder: {\r\n                        show: false\r\n                    },\r\n                    axisTicks: {\r\n                        show: false\r\n                    },\r\n                    tooltip: {\r\n                        enabled: false\r\n                    },\r\n\r\n                    \r\n                    //min: this.min\r\n                    //,max: this.max,\r\n\r\n                    //(max - min)이 1초단위 표현            input : 1 >> max -min\r\n\r\n                    //소수점 둘째자리 아래는 표현이 안됨 ex) 0.01 X\r\n                    //(max - min) * 10이 0.1초단위 표현     input : 0.1 >> (max - min) * 100\r\n                    //(max - min) * 0.1이 10초단위 표현     input : 10 >> (max - min) * 0.1\r\n                    //(max - min) * 0.01이 100초단위 표현     input : 100 >> (max - min) * 0.01\r\n                    \r\n                    //즉, input 입력 시 (1/input)을 곱해주면 됨\r\n                    //type: \"time\",\r\n                    //type: \"numeric\",\r\n                    //min: this.xmin,\r\n                    //max: this.xmax,\r\n                    //tickAmount: this.xtick\r\n                    \r\n                    //tickInterval:10* 1000,\r\n                    type: \"numeric\",\r\n                    // min: 0,\r\n                    // max: arrLabel.length-1,\r\n                    // tickAmount: 10,\r\n                },\r\n                yaxis: {\r\n                    title: {\r\n                        //text: '응답시간(milliseconds)'\r\n                        text: 'TPS Count'\r\n                    },\r\n                    tickAmount: 4,\r\n                    /*\r\n                    labels: {\r\n                        formatter: function(val, opts) {\r\n                            return val + 'ms'\r\n                        }\r\n                    },\r\n                    //*/\r\n                    min: 0,\r\n                    // max: 15000,\r\n                }\r\n            },\r\n            // 파이 차트 옵션\r\n            pieChartOptions: {\r\n                title: {\r\n                    text: 'SUCCESS/FAIL 차트',\r\n                    align: 'center'\r\n                },\r\n                colors: ['#00E397', '#FF7979',],\r\n                labels: ['SUCCESS', 'FAIL'],\r\n                legend: {\r\n                    position: 'top'\r\n                },\r\n            },\r\n            \r\n            focusIndex: 0,\r\n            data: [],\r\n            loading: false,\r\n            logData: [],\r\n            logLoading: false,\r\n            logTotalCount: 0,\r\n            pageSize: 10,\r\n            pagePosition: 'bottom',\r\n\r\n            statisticArr: []\r\n        }\r\n    },\r\n\r\n    created() {\r\n        this.loadGrid()\r\n    },\r\n\r\n    methods: {\r\n        loadGrid() {\r\n            this.loading = true\r\n            this.axios.get('/api/v1/statistics').then(response => {\r\n                this.loading = false\r\n                \r\n                response.data.historyList.forEach((row, index) => {\r\n                    row['index'] = index\r\n                })\r\n\r\n                //park\r\n                //console.log(\"timeout 찾기..\",response.data.historyList)//\r\n                this.statisticArr = response.data.historyList\r\n\r\n                this.data = response.data.historyList\r\n                this.$refs.historyList.selectRow(this.data[this.focusIndex])\r\n            }).catch(ex => {\r\n                console.log(ex)\r\n                this.loading = false\r\n            })\r\n        },\r\n        \r\n        xaxisChange(){\r\n            var multipleVal = this.value\r\n            \r\n            //console.log(\"zz\",multipleVal)\r\n            var tickTemp = (arrLabel.length-1)*parseFloat(multipleVal)//곱해줄 값을 input 값으로 받자! select 해서 받도록 단위 1초(1), 10초(0.1), 60초(0.6), 3600초(0.00027) \r\n            //console.log(\"max-min\",(arrLabel.length-1))\r\n            //console.log(\"parseFloat(multipleVal)\",parseFloat(multipleVal))\r\n            //console.log(\"tickTemp\",tickTemp)\r\n            //console.log(tickTemp.toFixed(6))\r\n            this.$refs.lineChart.updateOptions({\r\n                xaxis: {\r\n                    //categories: categories\r\n                    min: 1,\r\n                    max: arrLabel.length,\r\n                    tickAmount: tickTemp\r\n                },\r\n            })\r\n \r\n        },\r\n\r\n        \r\n\r\n        historyClick(row) {\r\n            this.value=1\r\n            if(row) {\r\n                this.focusIndex = row.index\r\n                this.logLoading = true\r\n\r\n                var loadingInstance = this.$loading({\r\n                    lock: true,\r\n                    text: 'Data Loading...',\r\n                    spinner: 'el-icon-loading',\r\n                    target: this.$refs.container.$el,\r\n                    fullscreen: false,\r\n                })\r\n\r\n                this.axios.get('/api/v1/statistics/result', {\r\n                    params: {\r\n                        workSeq: row.workSeq\r\n                    }\r\n                }).then(response => {\r\n                    loadingInstance.close()\r\n                    var resultList = response.data.resultList\r\n                    var graphList = response.data.graphList\r\n\r\n                    this.logTotalCount = resultList.length\r\n                    this.logData = resultList\r\n                    this.logLoading = false\r\n\r\n                    //park excel 메소드 참고\r\n\r\n                    var start\r\n                    var end\r\n                    var maxResTime =0;\r\n                    var minResTime;\r\n                    // var failCount = 0;\r\n                    // var successCount =0;\r\n\r\n                    this.logData.forEach((value, index) => {\r\n                        \r\n                        //시작시간\r\n                        if(index == 0){\r\n                            start = value.startDatetime\r\n                            minResTime=value.resTime\r\n                        }//종료시간\r\n                        else if(index == this.logData.length-1){\r\n                            end = value.endDatetime\r\n                        }\r\n                        //최대응답시간\r\n                        if(maxResTime < value.resTime){\r\n                            maxResTime = value.resTime\r\n                        }\r\n                        //최소응답시간\r\n                        if(minResTime > value.resTime){\r\n                            minResTime = value.resTime\r\n                        }\r\n\r\n                        // if(value.resTime>=3000){\r\n                        //     failCount++\r\n                        // }else{\r\n                        //     successCount++\r\n                        // }\r\n            \r\n     \r\n                        \r\n                    })\r\n                    //console.log(\"결과데이터\", this.logData)\r\n\r\n                    //console.log(\"timout 옮겨갔는지 확인\",this.statisticArr)//확인 -> 모든 실행목록임 매칭시켜야함\r\n\r\n                    //console.log('시작 시간:'+  start)\r\n                    //console.log('종료 시간:'+  end)\r\n                    //console.log('최대 응답 시간:'+  maxResTime)\r\n                    //console.log('최소 응답 시간:'+  minResTime)\r\n                    //console.log('전체 수행 횟수:'+  this.logData.length)\r\n                    //console.log('성공 횟수:'+  this.statisticArr[this.focusIndex].successCount)\r\n                    //console.log('실패 횟수:'+  this.statisticArr[this.focusIndex].failCount)\r\n                    this.tableData[0].data1 = start\r\n                    this.tableData[0].data2 = end\r\n                    this.tableData[1].data1 = maxResTime\r\n                    this.tableData[1].data2 = minResTime\r\n                    this.tableData[2].data1 = this.logTotalCount//this.logData.length\r\n                    this.tableData[2].data2 = this.statisticArr[this.focusIndex].successCount\r\n                    this.tableData[2].data3 = this.statisticArr[this.focusIndex].failCount\r\n                    /*************************************************** 라인 차트 데이터 가공 *****************************************************/\r\n                    var categories = []\r\n                    var arrCountStartRequest = []\r\n                    var arrCountEndRequest = []\r\n                    var sumEndRequest = 0;\r\n                    var series = []\r\n\r\n                    graphList.forEach((result, index, list) => {\r\n                        categories.push(result.resultTime)\r\n                        arrCountStartRequest.push(result.countStartRequest)\r\n                        arrCountEndRequest.push(result.countEndRequest)\r\n                        sumEndRequest += result.countEndRequest\r\n                    })\r\n\r\n                    arrLabel = categories\r\n                    //console.log(\"내 라벨\", arrLabel)\r\n                    \r\n                    // console.log(\"내 라벨 길이\", arrLabel.length)\r\n                    // console.log(\"인덱스 마지막 : \",(arrLabel.length-1)*0.1)\r\n\r\n                    //(max - min) * 10이 0.1초단위 표현     input : 0.1 >> (max - min) * 100\r\n                    //(max - min) * 0.1이 10초단위 표현     input : 10 >> (max - min) * 0.1\r\n                    //(max - min) * 0.01이 100초단위 표현     input : 100 >> (max - min) * 0.01\r\n\r\n                    //this.xaxisChange()\r\n                    // var multipleVal = this.value\r\n                    // console.log(\"zz\",multipleVal)\r\n                    // var tickTemp = (arrLabel.length-1)*1//곱해줄 값을 input 값으로 받자! select 해서 받도록 단위 1초(1), 10초(0.1), 60초(0.6), 3600초(0.00027) \r\n                    \r\n                    this.$refs.lineChart.updateOptions({\r\n                        xaxis: {\r\n                            //categories: categories\r\n                            min: 0,\r\n                            max: arrLabel.length-1,\r\n                            tickAmount: arrLabel.length-1,\r\n                        },\r\n                    })\r\n                    \r\n\r\n                    series.push({\r\n                        name: '요청수',\r\n                        data: arrCountStartRequest\r\n                    })\r\n                    \r\n                    series.push({\r\n                        name: '응답수',\r\n                        data: arrCountEndRequest\r\n                    })\r\n\r\n                    //console.log(series)\r\n                    //console.log(sumEndRequest)\r\n                    //console.log(graphList.length)\r\n                    this.$refs.lineChart.updateSeries(series)\r\n                    this.chartTitle = '평균 TPS: ' + Math.round((sumEndRequest / graphList.length))\r\n\r\n                    \r\n                    //*/\r\n                    /*****************************************************************************************************************************/\r\n\r\n\r\n\r\n                    /*************************************************** 라인 차트 데이터 가공 *****************************************************/\r\n                    /*\r\n                    var categories = []\r\n                    var series = []\r\n                    var tempArray = []\r\n                    var max = resultList[0].resTime\r\n\r\n                    resultList.forEach((result, index, list) => {\r\n                        var indexOf;\r\n\r\n                        if(row.workType == 'AT')\r\n                            indexOf = 2\r\n                        else if(row.workType == 'SR')\r\n                            indexOf = 4\r\n\r\n                        var rstName = result.rstName.substring(0, result.rstName.indexOf('-') + indexOf) + ' 루프'\r\n\r\n                        if(max < result.resTime)\r\n                            max = result.resTime\r\n                        \r\n                        tempArray.push(result.resTime)\r\n                        if(index + 1 == list.length) {\r\n                            series.push({\r\n                                name: rstName,\r\n                                data: [...tempArray]\r\n                            })\r\n                            return\r\n                        }\r\n\r\n                        var rstNameNums = result.rstName.substring(result.rstName.indexOf('-') + 1, result.rstName.length).split('-');\r\n                        var nextRstNameNums = list[index + 1].rstName.substring(list[index + 1].rstName.indexOf('-') + 1, list[index + 1].rstName.length).split('-')\r\n\r\n                        if(row.workType == 'AT') {\r\n                            if(rstNameNums[0] != nextRstNameNums[0]) {\r\n                                series.push({\r\n                                    name: rstName,\r\n                                    data: [...tempArray]\r\n                                })\r\n                                tempArray = []\r\n                            }\r\n                        }\r\n                        else if(row.workType == 'SR') {\r\n                            if(rstNameNums[0] != nextRstNameNums[0] || rstNameNums[1] != nextRstNameNums[1]) {\r\n                                series.push({\r\n                                    name: rstName,\r\n                                    data: [...tempArray]\r\n                                })\r\n                                tempArray = []\r\n                            }\r\n                        }\r\n\r\n                        categories.push(result.rstName)\r\n                    })\r\n\r\n                    this.$refs.lineChart.updateOptions({\r\n                        xaxis: {\r\n                            categories: categories\r\n                        },\r\n                    })\r\n\r\n                    this.$refs.lineChart.updateSeries(series)\r\n                    //*/\r\n                    /*****************************************************************************************************************************/\r\n\r\n                    /*************************************************** 파이 차트 데이터 가공 *****************************************************/\r\n                    /*\r\n                    var pieData = []\r\n                    pieData.push(row.successCount)\r\n                    pieData.push(row.failCount)\r\n\r\n                    this.$refs.pieChart.updateSeries(pieData)\r\n                    //*/\r\n                    /*****************************************************************************************************************************/\r\n                }).catch(ex => {\r\n                    this.logLoading = false\r\n                    loadingInstance.close()\r\n                    console.log(ex)\r\n                })\r\n            }\r\n        },\r\n\r\n        resTimeCellCss(row, value) {\r\n            if(row.rstType == 'FAIL') {\r\n                return { background: '#FF7979' }\r\n            }\r\n        },\r\n\r\n        dbClickResult(row) {\r\n            this.resultContent = true\r\n            try {\r\n                this.jsonData = JSON.parse(row.rstContent)\r\n            } catch(e) {\r\n                this.jsonData = row.rstContent\r\n            }\r\n            \r\n        },\r\n\r\n        downloadExcel() {\r\n            if(this.logLoading) {\r\n                this.notification('downloadExcel')\r\n            } else {\r\n                var excelData = []\r\n\r\n                this.logData.forEach((value, index) => {\r\n                    excelData.push({\r\n                        'No': index + 1,\r\n                        '수행명': value.rstName,\r\n                        '수행일시': \"'\" + value.startDatetime,\r\n                        '수행종료일시': \"'\" + value.endDatetime,\r\n                        '응답시간(ms)': value.resTime,\r\n                        '내용': value.rstContent\r\n                    })\r\n                })\r\n                const wb = XLSX.utils.book_new()\r\n                const ws = XLSX.utils.json_to_sheet(excelData)\r\n                XLSX.utils.book_append_sheet(wb, ws, 'Sheet1')\r\n                XLSX.writeFile(wb, 'log.csv')\r\n                //*/\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#chart {\r\n    margin-top: 10px;\r\n}\r\n\r\n/*\r\n#lineChart {\r\n    display: inline-block;\r\n}\r\n//*/\r\n\r\n#pieChart {\r\n    display: inline-block;\r\n}\r\n\r\n.vjs-tree {\r\n    height: 500px;\r\n    overflow: auto;\r\n}\r\n\r\n.dialog-h {\r\n    height: 600px;\r\n}\r\n\r\n</style>\n\n\n// WEBPACK FOOTER //\n// src/components/Statistics.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('Layout',{staticStyle:{\"width\":\"100%\"}},[_c('LayoutPanel',{staticStyle:{\"height\":\"45px\",\"text-align\":\"right\"},attrs:{\"region\":\"north\",\"border\":false}},[_c('Buttons',{attrs:{\"buttonEvents\":_vm.buttonEvents}})],1),_vm._v(\" \"),_c('LayoutPanel',{staticStyle:{\"width\":\"400px\"},attrs:{\"region\":\"west\",\"title\":\"수행기록\"}},[_c('DataGrid',{ref:\"historyList\",attrs:{\"data\":_vm.data,\"columnResizing\":true,\"border\":false,\"loading\":_vm.loading,\"selectionMode\":\"single\"},on:{\"selectionChange\":function($event){return _vm.historyClick($event)}}},[_c('GridColumn',{attrs:{\"cellCss\":\"datagrid-td-rownumber\",\"width\":\"30\",\"align\":\"center\"},scopedSlots:_vm._u([{key:\"body\",fn:function(scope){return [_vm._v(\"\\n                        \"+_vm._s(scope.rowIndex + 1)+\"\\n                    \")]}}])},[_c('template',{slot:\"header\"},[_vm._v(\"\\n                        No.\\n                    \")])],2),_vm._v(\" \"),_c('GridColumn',{attrs:{\"field\":\"workDatetime\",\"title\":\"수행일시\",\"width\":\"160\",\"align\":\"center\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('GridColumn',{attrs:{\"field\":\"workName\",\"title\":\"수행명\",\"align\":\"left\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('GridColumn',{attrs:{\"field\":\"rstCount\",\"title\":\"수행건수\",\"align\":\"center\",\"width\":\"70\",\"sortable\":\"\"}})],1)],1),_vm._v(\" \"),_c('LayoutPanel',{staticStyle:{\"width\":\"100%\",\"height\":\"100%\"},attrs:{\"region\":\"center\",\"border\":false}},[_c('Layout',{ref:\"container\"},[_c('LayoutPanel',{staticStyle:{\"width\":\"100%\",\"height\":\"225px\"},attrs:{\"region\":\"north\",\"title\":\"수행결과\"}},[[_c('el-table',{staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.tableData}},[_c('el-table-column',{attrs:{\"prop\":\"header1\",\"label\":\"\",\"width\":\"180\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"data1\",\"label\":\"\",\"width\":\"200\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"blank\",\"label\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"header2\",\"label\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"data2\",\"label\":\"[종합집계]\",\"width\":\"200\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"header3\",\"label\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"data3\",\"label\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"blank\",\"label\":\"\"}}),_vm._v(\" \"),_c('el-table-column',{attrs:{\"prop\":\"blank\",\"label\":\"\"}})],1)]],2),_vm._v(\" \"),_c('LayoutPanel',{staticStyle:{\"width\":\"100%\",\"height\":\"620px\"},attrs:{\"region\":\"center\"}},[_c('div',{staticStyle:{\"width\":\"100%\",\"text-align\":\"center\",\"margin-top\":\"10px\"}},[_c('div',{staticStyle:{\"width\":\"100%\"}},[_vm._v(\"\\n                                \"+_vm._s(_vm.chartTitle)+\"\\n                        \")]),_vm._v(\" \"),_c('div',{attrs:{\"align\":\"right\"}},[_c('label',[_vm._v(\"단위\")]),_vm._v(\"   \\n                            \"),_c('el-select',{staticStyle:{\"width\":\"10%\",\"margin-right\":\"10px\"},attrs:{\"placeholder\":\"Select\"},on:{\"change\":function($event){return _vm.xaxisChange()}},model:{value:(_vm.value),callback:function ($$v) {_vm.value=$$v},expression:\"value\"}},_vm._l((_vm.options),function(item){return _c('el-option',{key:item.value,attrs:{\"label\":item.label,\"value\":item.value}})}),1)],1)]),_vm._v(\" \"),_c('div',{attrs:{\"id\":\"chart\"}},[_c('apexchart',{ref:\"lineChart\",attrs:{\"id\":\"lineChart\",\"type\":\"line\",\"height\":\"250\",\"options\":_vm.chartOptions,\"series\":_vm.series}})],1),_vm._v(\" \"),_c('DataGrid',{ref:\"resultList\",staticStyle:{\"width\":\"100%\",\"height\":\"260px\"},attrs:{\"data\":_vm.logData,\"total\":_vm.logTotalCount,\"pagination\":true,\"pageSize\":_vm.pageSize,\"pagePosition\":_vm.pagePosition,\"columnResizing\":true,\"border\":false},on:{\"rowDblClick\":_vm.dbClickResult}},[_c('GridColumn',{attrs:{\"cellCss\":\"datagrid-td-rownumber\",\"width\":\"60\",\"align\":\"center\"},scopedSlots:_vm._u([{key:\"body\",fn:function(scope){return [_vm._v(\"\\n                                \"+_vm._s(scope.rowIndex + 1)+\"\\n                            \")]}}])},[_c('template',{slot:\"header\"},[_vm._v(\"\\n                                No.\\n                            \")])],2),_vm._v(\" \"),_c('GridColumn',{attrs:{\"field\":\"rstName\",\"title\":\"수행명\",\"width\":\"150\",\"align\":\"center\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('GridColumn',{attrs:{\"field\":\"startDatetime\",\"title\":\"수행일시\",\"width\":\"200\",\"align\":\"center\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('GridColumn',{attrs:{\"field\":\"endDatetime\",\"title\":\"수행종료일시\",\"width\":\"200\",\"align\":\"center\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('GridColumn',{attrs:{\"field\":\"resTime\",\"title\":\"응답시간(ms)\",\"cellCss\":_vm.resTimeCellCss,\"width\":\"100\",\"align\":\"center\",\"sortable\":\"\"}}),_vm._v(\" \"),_c('GridColumn',{attrs:{\"field\":\"rstContent\",\"title\":\"내용\",\"halign\":\"center\"}})],1)],1)],1)],1)],1),_vm._v(\" \"),_c('el-dialog',{attrs:{\"title\":\"결과 내용\",\"visible\":_vm.resultContent,\"width\":\"800px\",\"custom-class\":\"dialog-h\"},on:{\"update:visible\":function($event){_vm.resultContent=$event}}},[_c('vue-json-pretty',{attrs:{\"data\":_vm.jsonData,\"showLength\":true,\"showDoubleQuotes\":false,\"showSelectController\":true,\"highlightMouseoverNode\":true}})],1)],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-47a8d1ef\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/Statistics.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-47a8d1ef\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Statistics.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Statistics.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Statistics.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-47a8d1ef\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Statistics.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-47a8d1ef\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Statistics.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}